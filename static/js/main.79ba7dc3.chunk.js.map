{"version":3,"sources":["components/Notification/Notification.js","components/Statistic/Statistic.js","components/Buttons/FeedbackOptions.js","components/Section/Section.js","App.js","index.js","components/Statistic/Statistic.module.css","components/Buttons/Buttons.module.css","components/Section/Section.module.css"],"names":["NotificationMessage","text","className","styles","notify","defaultTypes","Statistic","good","neutral","bad","total","percentage","title","statList","Notification","FeedbackOptions","options","onLeaveFeedback","buttons","map","option","button","type","value","onClick","Section","children","section","App","useState","setGood","setNeutral","setBad","countTotalFeedback","e","target","prevGood","prevNeutral","prevBad","Math","round","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kOAKMA,EAAsB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC7B,OAAO,mBAAGC,UAAWC,IAAOC,OAArB,SAA8BH,KAGvCD,EAAoBK,aAAe,CACjCJ,KAAM,IAKOD,QCgBAM,EA1BG,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC9C,OACE,qCACE,oBAAIT,UAAWC,IAAOS,MAAtB,uBACCF,EAAQ,EACP,qBAAIR,UAAWC,IAAOU,SAAtB,UACE,wCAAWN,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,qDAAwBC,EAAxB,UAGF,cAACG,EAAD,CAAqBb,KAAM,0B,gBCUpBc,EAxBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,qBAAKf,UAAWC,IAAOe,QAAvB,SACGF,EAAQG,KAAI,SAAAC,GAAM,OACjB,wBACElB,UAAWC,IAAOkB,OAElBC,KAAK,SACLC,MAAOH,EACPI,QAASP,EALX,SAOGG,GALIA,S,gBCSAK,EAdC,SAAC,GAAyB,IAAvBb,EAAsB,EAAtBA,MAAOc,EAAe,EAAfA,SACxB,OACE,sBAAKxB,UAAWC,IAAOwB,QAAvB,UACE,oBAAIzB,UAAWC,IAAOS,MAAtB,SAA8BA,IAC7Bc,MCJQ,SAASE,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOtB,EAAP,KAAauB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOrB,EAAP,KAAgBuB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOpB,EAAP,KAAYuB,EAAZ,KAqBMC,EAAqB,WACzB,OAAO1B,EAAOC,EAAUC,GAM1B,OACE,qCACE,cAAC,EAAD,CAASG,MAAO,wBAAhB,SACE,cAAC,EAAD,CAAiBI,QA9BP,CAAC,OAAQ,UAAW,OA8BKC,gBA7BjB,SAAAiB,GAGtB,OAFsBA,EAAEC,OAAOZ,OAG7B,IAAK,OACHO,GAAQ,SAAAM,GAAQ,OAAIA,EAAW,KAC/B,MACF,IAAK,UACHL,GAAW,SAAAM,GAAW,OAAIA,EAAc,KACxC,MACF,IAAK,MACHL,GAAO,SAAAM,GAAO,OAAIA,EAAU,KAC5B,MAEF,QACE,aAgBF,cAAC,EAAD,UACE,cAAC,EAAD,CACE/B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOuB,IACPtB,WAAY4B,KAAKC,MAdR,IAAPjC,EAAc0B,YC7B1BQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAD,MAEFgB,SAASC,eAAe,U,kBCP1BC,EAAOC,QAAU,CAAC,MAAQ,yBAAyB,OAAS,0BAA0B,SAAW,8B,kBCAjGD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,kBCA9DD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,0B","file":"static/js/main.79ba7dc3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from '../Statistic/Statistic.module.css';\r\n\r\nconst NotificationMessage = ({ text }) => {\r\n  return <p className={styles.notify}>{text}</p>;\r\n};\r\n\r\nNotificationMessage.defaultTypes = {\r\n  text: '',\r\n};\r\nNotificationMessage.propTypes = {\r\n  text: PropTypes.string,\r\n};\r\nexport default NotificationMessage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport NotificationMessage from '../Notification';\r\nimport styles from './Statistic.module.css';\r\n\r\nconst Statistic = ({ good, neutral, bad, total, percentage }) => {\r\n  return (\r\n    <>\r\n      <h2 className={styles.title}>Statistic</h2>\r\n      {total > 0 ? (\r\n        <ul className={styles.statList}>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bad: {bad}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive feedback: {percentage}%</li>\r\n        </ul>\r\n      ) : (\r\n        <NotificationMessage text={'No feedback given'} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nStatistic.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  percentage: PropTypes.number.isRequired,\r\n};\r\nexport default Statistic;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Buttons.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div className={styles.buttons}>\r\n      {options.map(option => (\r\n        <button\r\n          className={styles.button}\r\n          key={option}\r\n          type=\"button\"\r\n          value={option}\r\n          onClick={onLeaveFeedback}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div className={styles.section}>\r\n      <h1 className={styles.title}>{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import { useState } from 'react';\r\nimport Statistic from './components/Statistic';\r\nimport FeedbackOptions from './components/Buttons';\r\nimport Section from './components/Section';\r\n\r\nexport default function App() {\r\n  const [good, setGood] = useState(0);\r\n  const [neutral, setNeutral] = useState(0);\r\n  const [bad, setBad] = useState(0);\r\n  const OPTIONS = ['good', 'neutral', 'bad'];\r\n  const feedbackCounter = e => {\r\n    const feedbackValue = e.target.value;\r\n\r\n    switch (feedbackValue) {\r\n      case 'good':\r\n        setGood(prevGood => prevGood + 1);\r\n        break;\r\n      case 'neutral':\r\n        setNeutral(prevNeutral => prevNeutral + 1);\r\n        break;\r\n      case 'bad':\r\n        setBad(prevBad => prevBad + 1);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const countTotalFeedback = () => {\r\n    return good + neutral + bad;\r\n  };\r\n  const countPositiveFeedbackPercentage = () => {\r\n    return (good * 100) / countTotalFeedback();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Section title={'Please leave feedback'}>\r\n        <FeedbackOptions options={OPTIONS} onLeaveFeedback={feedbackCounter} />\r\n      </Section>\r\n      <Section>\r\n        <Statistic\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={countTotalFeedback()}\r\n          percentage={Math.round(countPositiveFeedbackPercentage())}\r\n        />\r\n      </Section>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Statistic_title__3s-n1\",\"notify\":\"Statistic_notify__3wdjW\",\"statList\":\"Statistic_statList__3HKT4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__1_bP7\",\"button\":\"Buttons_button__1c3SY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__20-6Y\",\"title\":\"Section_title__1KghD\"};"],"sourceRoot":""}